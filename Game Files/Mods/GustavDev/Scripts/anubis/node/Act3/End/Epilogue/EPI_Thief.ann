game.states.EPI_Thief = State{
    function ()
        modules = {"shared.moveto", "shared.util", "shared.items", "shared.math", "shared.dialog"}
        description = [[Minc's thief friend Happy - behaviour for Act 3 EPI.]]

        --------------------------------------------------------------------------------------------------------------------
        -- Local params

        local minsc = Entity("S_Player_Minsc_0de603c5-42e2-4811-9dad-f652de080eba")

        -- State flags
        local laezelPresentFlag = Flag("EPI_Epilogue_State_LaezelPresent_614de8c3-2df5-43c6-b0e9-b8dbd8c3bb37")
        local galePresentFlag = Flag("EPI_Epilogue_State_GalePresent_5693605b-02e5-4076-8555-f546ad08eb53")
        local spectralGalePresentFlag = Flag("EPI_Epilogue_State_SpectralGalePresent_fe6af825-0573-49e0-8dbb-ba2198f2be6b")
        local talkingToMinscFlag = Flag("EPI_Origins_Minsc_TalkingToThief_a19f1963-664a-41e2-b4b0-71126a55d525")
        local roamingEnabledFlag = Flag("EPI_Minsc_ThiefRoamingBehavioursEnabled_52d12a54-2837-47eb-8c06-b96944fc3775")

        -- Internal variables
        local selectedBehaviour = nil
        local behaviourIterator = 1 -- Values 1, 2 and 3 - stay near Minsc; Value 4 - wander off 
        local currentDancingPos = nil
        local currentSneakingPos = nil
        local sneakingAttempts = 0
        local currentlySneaking = false
        local caughtSneaking = false

        -- Positions
        local nearMinscPos = Entity("S_EPI_ThiefNearMinsc_2eaf5c5d-ff33-419c-b776-1b9436e9aec8")
        local drinkingPos = Entity("S_EPI_ThiefDrinks_2d2e1af6-3d51-447f-904a-77b0780f467f")
        local dancingPositions = {Entity("S_EPI_ThiefDance01_ebf77c26-ab9f-44ac-ba38-c36ed9012d85"), 
                                  Entity("S_EPI_ThiefDance02_878610e9-def6-49da-8ef9-f38bbc766e42"),
                                  Entity("S_EPI_ThiefDance03_cfec2769-429a-4aae-846b-85a53c9c8c09")}
        local sneakingDockPos = Entity("S_EPI_ThiefSneaking_Dock_b08b3103-4b87-432e-a331-7735d18a702c")
        local sneakingBeachPos = Entity("S_EPI_ThiefSneaking_Beach_fa5cf0ef-7fab-40c4-abc7-a3384bf738d7")
        local sneakingNearWithersPos = Entity("S_EPI_ThiefSneaking_NearWithers_c667692d-3caa-48d7-a0f0-ed09bd1f3d3c")
        local sneakingNearGalePos = Entity("S_EPI_ThiefSneaking_NearGale_cb2e49a1-3b09-4702-918a-9cbfc9bcd31e")
        local sneakingNearLaezelPos = Entity("S_EPI_ThiefSneaking_NearLaezel_86980a27-b991-4e91-a365-fb8f37e3b425")
        local validSneakingPositions = {}

        -- Animations
        local nervousAnim = Animation("CUST_EPI_Thief_Nervous_01_43ef85f1-78f6-4ff0-b048-eafbbf998969")
        local eatingAnim = Animation("CUST_EPI_Thief_Eating_01_599b6d77-a517-4d69-9b68-a0af909fc231")
        local drinkingAnim = Animation("CUST_EPI_Thief_Drinking_01_bc023cc4-f67a-4bc6-bb44-983c6b78f7b1")
        local dancingAnim = Animation("CUST_EPI_Thief_Dancing_01_38dc1e43-bc1c-4004-99a7-9954e701ccf4")
        local backingAwayAnim = Animation("CUST_EPI_Thief_Backing_Away_01_47bf45f5-7f4b-467c-8b58-ed591db846f1")

        self.OnInit = function()
            table.insert(validSneakingPositions, sneakingDockPos)
            table.insert(validSneakingPositions, sneakingBeachPos)
            table.insert(validSneakingPositions, sneakingNearWithersPos)

            if GetFlag(galePresentFlag) == false and GetFlag(spectralGalePresentFlag) == false then
                table.insert(validSneakingPositions, sneakingNearGalePos)
            end

            if GetFlag(laezelPresentFlag) == false and GetFlag(galePresentFlag) == false and GetFlag(spectralGalePresentFlag) == false then
                table.insert(validSneakingPositions, sneakingNearLaezelPos)
            end

        end

        --------------------------------------------------------------------------------------------------------------------
        -- Helpers

        helpers.action.PlayAnimationAt = function(pos, animation)
            if pos ~= nil then
                if animation ~= nil then
                    PlayAnimation(nervousAnim, false) -- nervous while walking
                    if mod.moveto.MoveToPoint(pos, MovementSpeed.Stroll, me, 0.01, false) then
                        LookFrom(pos)
                        StopAnimation(me, false)
                        PlayAnimation(animation, true, false)
                        Sleep(3.0)
                    else
                        DebugText(me, "Error: can't reach destination")
                        Sleep(3.0)
                    end
                else
                    DebugText(me, "Error: animation is nil")
                end
            else
                DebugText(me, "Error: position is nil")
            end
        end
        --------------------------------------------------------------------------------------------------------------------
        -- States

        nodes.EPI_Thief_TalkingToMinsc = Action {
            function()
                Sleep(1.0)
                LookAtEntity(minsc, 3.0)
                DebugText(me, "Listening to Minsc")

                if math.random(1,3) == 1 then
                    PlayAnimation(backingAwayAnim, true, false)
                else
                    PlayAnimation(nervousAnim, true, false)
                end
                mod.util.SleepRandom(1.0, 3.0)
            end,

            OnLeave = function()
                StopAnimation(me)
            end,

            Valid = function()
                return GetFlag(talkingToMinscFlag)
            end
        }
 
        nodes.EPI_Thief_RunningBackToTable = Action {
            function()
                DebugText(me, "Running back to table")

                PlayAnimation(backingAwayAnim, true, false)
                if mod.moveto.MoveToPoint(nearMinscPos, MovementSpeed.Run, me, 0.5, false) then
                    caughtSneaking = false
                    LookFrom(nearMinscPos)
                    mod.util.SleepRandom(2.0, 4.0)
                else
                    DebugText(me, "Error: can't reach destination")
                    Sleep(3.0)
                end
            end,

            OnLeave = function()
                StopAnimation(me)
            end,

            CanEnter = function()
                return caughtSneaking
            end
        }

        nodes.EPI_Thief_Away = Selector {
            Valid = function(node)
                return CheckAnySelectable(node)
            end,

            CanEnter = function()
                return behaviourIterator >= 7 and caughtSneaking == false
            end,
    
            function(nodes)

                if selectedBehaviour == nil or not nodes.TryGetChild(selectedBehaviour).IsSelectable()  then
                    local selectedNode = nil
                    selectedNode = FindWeightedRandomSelectable(nodes, {
                        [nodes.Dancing] = 2,
                        [nodes.Sneaking] = 1
                    })
                    selectedBehaviour = selectedNode.Name
                    behaviourIterator = 1
                    return selectedNode
                end
                return nodes.TryGetChild(selectedBehaviour)
            end
        }
        
        nodes.EPI_Thief_Away.Dancing = Action {
            function()
                DebugText(me, "Dancing")
                Sleep(1.0)

                if currentDancingPos == nil then
                    currentDancingPos = dancingPositions[math.random(#dancingPositions)]
                end

                helpers.PlayAnimationAt(currentDancingPos, dancingAnim)

                currentDancingPos = nil
                selectedBehaviour = nil
            end,

            OnLeave = function()
                StopAnimation(me)
            end
        }

        nodes.EPI_Thief_Away.Sneaking = Action {
            function()
                DebugText(me, "Sneaking, valid positions: [1]", tostring(#validSneakingPositions))
                Sleep(1.0)

                if currentSneakingPos == nil then
                    currentSneakingPos = validSneakingPositions[math.random(#validSneakingPositions)]
                end

                helpers.PlayAnimationAt(currentSneakingPos, nervousAnim)

                if sneakingAttempts > 3 then
                    currentSneakingPos = nil
                    selectedBehaviour = nil
                    return
                end

                local nearbyCharacters = GetActiveCharacters(me, 8.0)
                DebugText(me, "Nearby characters: [1]", tostring(#nearbyCharacters))
                if #nearbyCharacters < 2 then
                    ApplyStatus(me, "EPI_EPILOGUE_THIEF_CHECKNEARBYAURA", true, -1.0, nil)
                    ApplyStatus(me, "SNEAKING", true, -1.0, nil)
                    currentlySneaking = true

                    Wander(4.0, math.random(40.0, 60.0), MovementSpeed.Stroll)

                    DebugText(me, "Wander finished")
                    RemoveStatus(me, "EPI_EPILOGUE_THIEF_CHECKNEARBYAURA")
                    RemoveStatus(me, "SNEAKING")
                    currentlySneaking = false
                    currentSneakingPos = nil
                    selectedBehaviour = nil
                else
                    helpers.PlayAnimationAt(currentSneakingPos, nervousAnim)
                    mod.util.SleepRandom(1.0, 3.0)
                end
            end,

            OnInterrupt = function()
                DebugText(me, "Interrupted sneaking [1]", tostring(caughtSneaking))
            end,

            OnLeave = function()
                DebugText(me, "Leaving Sneaking")
                StopAnimation(me)
                RemoveStatus(me, "EPI_EPILOGUE_THIEF_CHECKNEARBYAURA")
                RemoveStatus(me, "SNEAKING")
                currentlySneaking = false
                currentSneakingPos = nil
                selectedBehaviour = nil
            end,

            Valid = function()
                return caughtSneaking == false
            end
        }

        nodes.EPI_Thief_NearMinsc = Selector {
            Valid = function(node)
                return CheckAnySelectable(node)
            end,

            CanEnter = function()
                return behaviourIterator < 7 and caughtSneaking == false
            end,
    
            function(nodes)
                if selectedBehaviour == nil or not nodes.TryGetChild(selectedBehaviour).IsSelectable()  then
                    local selectedNode = nil
                    selectedNode = FindWeightedRandomSelectable(nodes, {
                        [nodes.Drinking] = 1,
                        [nodes.Eating] = 1,
                        [nodes.Nervous] = 1
                    })
                    selectedBehaviour = selectedNode.Name
                    if  GetFlag(roamingEnabledFlag) then
                        behaviourIterator = behaviourIterator + 1
                    end
                    DebugText(me, "Behaviour state checker: [1]", behaviourIterator)
                    return selectedNode
                end
                return nodes.TryGetChild(selectedBehaviour)
            end
        }

        nodes.EPI_Thief_NearMinsc.Drinking = Action {
            function()
                DebugText(me, "Drinking")
                Sleep(1.0)

                helpers.PlayAnimationAt(drinkingPos, drinkingAnim)
                mod.util.SleepRandom(1.0,2.0)

                selectedBehaviour = nil
            end,

            OnLeave = function()
                StopAnimation(me)
            end
        }
    
        nodes.EPI_Thief_NearMinsc.Eating = Action {
            function()
                DebugText(me, "Eating")
                Sleep(1.0)

                helpers.PlayAnimationAt(nearMinscPos, eatingAnim)
                mod.util.SleepRandom(1.0,2.0)

                selectedBehaviour = nil
            end,
            
            OnLeave = function()
                StopAnimation(me)
            end
        }
    
        nodes.EPI_Thief_NearMinsc.Nervous = Action {
            function()
                DebugText(me, "Nervous")
                Sleep(1.0)

                helpers.PlayAnimationAt(nearMinscPos, nervousAnim)
                mod.util.SleepRandom(1.0, 2.0)

                selectedBehaviour = nil
            end,

            OnLeave = function()
                StopAnimation(me)
            end
        }

        events.EntityEvent = function(e)
            if e.TargetEntity == me and e.Event == "EPI_Thief_CaughtSneaking" then
                DebugText(me, "Caught!")
                caughtSneaking = true
                StopAnimation(me)
                RemoveStatus(me, "EPI_EPILOGUE_THIEF_CHECKNEARBYAURA")
                RemoveStatus(me, "SNEAKING")
                currentlySneaking = false
                currentSneakingPos = nil
                selectedBehaviour = nil
                Interrupt()
            end
        end

    end
}