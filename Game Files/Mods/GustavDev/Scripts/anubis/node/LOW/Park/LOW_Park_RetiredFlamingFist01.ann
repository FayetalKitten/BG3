game.states.LOW_Park_RetiredFlamingFist01 = State{function()
    modules = {"shared.dialog"}

    description = [[For performance reasons we might disable Anubis completely on vignette characters.
        This Anubis script must not keep any important state that can't be reinitialized once Anubis is reenabled]]

    params.regionBlockFlag = {type = EParamType.String,  required=false, default="", help=[[
        Blocks the ADs for the entire group of characters (prevents overlap)
    ]]}

    params.dialogBlockFlag = {type = EParamType.String,  required=false, default="", help=[[
        Blocks this specific AD from happening (prevents repetition)
    ]]}

    params.partners = {type = EParamType.String, arrayRange = "..4", required = false, default = {}, help = [[
        Dialog Partner list
    ]]}

    params.AD = {type = EParamType.String, required=true, help=[[
        The AD to play.
    ]]}

    params.blocking = {type = EParamType.Bool,  required=false, default = true, help=[[
        Whether the AD is blocking (waitForCompletion).
    ]]}

    params.setDelay = {type = EParamType.Number,  required=false, default=15.0, help=[[
        Delay between the end of one loop of the AD and the start of the next loop.
    ]]}

    local AD = Dialog(params.AD)
    local regionBlockFlag = Flag(params.regionBlockFlag)
    local dialogBlockFlag = Flag(params.dialogBlockFlag)
    local partners = {}
    local blocking = true
    local didInit = false
    local seat = Entity("S_LOW_Park_RetiredFist_Chair04_ce500f95-489d-4bd7-8141-837faf2158be")

    helpers.IsAvailableForDialog = function(speaker)
        if EntityExists(speaker) and
            ((speaker.IsCharacter and
                not speaker.Character.IsDead and
                not speaker.IsInCombat and
                not IsInDialog(speaker, false) and
                not speaker.Character.IsInteractionDisabled) or
            (speaker.IsItem and
                not speaker.Item.IsDestroyed)) and
            (speaker == me or
                CanSee(me, speaker))
        then
            return true
        else
            return false
        end
    end

    helpers.PartnersAvailable = function()
        for _, partner in ipairs(partners) do
            if not helpers.IsAvailableForDialog(partner) then
                return false
            end
        end
        return true
    end

    helpers.Init = function()
        if AD == nil then
            DebugLog("Failed to find the automated dialog"..params.AD)
        end

        if params.partners then
            for _, partner in ipairs(params.partners) do
                table.insert(partners, FindEntity(partner))
            end
        end

        blocking = params.blocking
        didInit = true
    end

    self.OnEnter = function()
        if not me.IsReposedSitting then
            UseItem(seat.Item)
        end
    end

    self.CanEnter = function()
        if AD ~= nil then
            if not didInit then
                helpers.Init()
            end
            return (not regionBlockFlag or
                    not GetFlag(regionBlockFlag, nil)) and
                    (not dialogBlockFlag or
                    not GetFlag(dialogBlockFlag, nil)) and
                    helpers.PartnersAvailable() and
                    helpers.IsAvailableForDialog(me)
        else
            return false
        end
    end

    nodes.DoAD = Action
    {
        function()
            local RetVal = mod.dialog.StartCheckedAutomatedDialogRateLimited(AD,
                    { maxDistance = 10.0,
                    checkSight = true,
                    ignoreCower = false,
                    waitForCompletion = true,
                    minDelay = params.setDelay,
                    cullingDistance = 5.0 },
                    me, table.unpack(partners))
                
            if RetVal == error.AutomatedDialogRateLimitedStartFailed then
                DebugLog("AD Failed ot start" ..params.AD)
                Sleep(3.0)
            end
        end
    }
end}

game.states.GLO_VignetteCharacter = State{function()

    params.ADState = {type=EParamType.State, required = false, default = nil, help=[[AD State.]]}
    params.StandAtTriggerState = {type=EParamType.State, required = false, default = nil, help=[[Stand at trigger State.]]}

    nodes.ADState = Proxy{
        params.ADState
    }

    nodes.StandAtTriggerState = Proxy{
        params.StandAtTriggerState
    }

    nodes.Fallback = Action{
        function()
            Sleep(3.0)
        end
    }

end}