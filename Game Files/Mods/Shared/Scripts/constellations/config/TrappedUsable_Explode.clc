game.configs.TrappedUsable_Explode = Config{
    params={
        DestroyType = {
            type = EParamType.String,
            help = [[When the mine goes off, use this death type. If not set, don't destroy on explosion]],
            required = false,
            default = [[EXPLODE]]
        },
        VFXOnBone = {
            type = EParamType.String,
            help = [[Bone on which the the VFX is played.]],
            required = false,
            default = [[Dummy_FX]]
        },
        Type = {
            type = EParamType.String,
            help = [[            Type of invisibility. Options:
            None - No perception logic.
            Invisible - Object is invisible until discovered
            Interactable - Object is uninteractable (like scenery) until discovered. Also hides 'trapped' state, if object is trapped.
            Trapped - Hides trapped state until discovered.
            Highlight - Object is highlighted when noticed.
            ]],
            required = false,
            default = [[Trapped]]
        },
        VFXOff = {
            type = EParamType.String,
            help = [[VFX while the trap is disabled.]],
            required = false,
            default = [[]]
        },
        MinDistance = {
            type = EParamType.Number,
            help = [[Minimum distance that players are required to be in for the skill check. A distance of 0 disables the check.]],
            required = false,
            default = 6
        },
        VFXOn = {
            type = EParamType.String,
            help = [[VFX while the trap is enabled and has been spotted.]],
            required = false,
            default = [[VFX_Script_Trap_Overlay_Red_01_a7361f25-e942-e071-7ce3-7a8182f4e0ef]]
        },
        VFXOffBone = {
            type = EParamType.String,
            help = [[Bone on which the the VFX is played.]],
            required = false,
            default = [[Dummy_FX]]
        },
        SoundOn = {
            type = EParamType.String,
            help = [[Sound when trap is turned on]],
            required = false,
            default = [[PUZ_Trap_Mechanical_On]]
        },
        Key = {
            type = EParamType.String,
            help = [[Key used when locking the item]],
            required = false,
            default = [[STORYLOCK]]
        },
        StartUseEnabled = {
            type = EParamType.Bool,
            help = [[Does the item's use start enabled? (should triggering item's use actions be blocked until the EnableObject socket is triggered?)]],
            required = false,
            default = true
        },
        Skill = {
            type = EParamType.String,
            help = [[The skill checked.]],
            required = false,
            default = [[Perception]]
        },
        DC = {
            type = EParamType.String,
            help = [[Perception check DC.]],
            required = false,
            default = [[HiddenPerception_Medium_cd1800ab-1b11-4c7a-9f50-fdeb8d35481f]]
        },
        OneShot = {
            type = EParamType.Bool,
            help = [[The trap activates only the first time on use (e.g. explodes chest), rather than every time (e.g. a chest with spikes that come out)]],
            required = false,
            default = true
        },
        DestroyProjectileSpell = {
            type = EParamType.String,
            help = [[The projectile (if any) that explodes when the item destroys itself]],
            required = false,
            default_value_provider = [[spell_projectile]],
            default = [[Projectile_Fireball_Trap]]
        },
        SoundOff = {
            type = EParamType.String,
            help = [[Sound when trap is turned off]],
            required = false,
            default = [[PUZ_Trap_Mechanical_Off]]
        },
        StartEnabled = {
            type = EParamType.Bool,
            help = [[Does the trap start enabled? (will it trigger when using the item?)]],
            required = false,
            default = true
        },
        DestroyOnDisarm = {
            type = EParamType.Bool,
            help = [[Does the item break on Disarm?]],
            required = false,
            default = false
        },
    },
    root=StateRef{game.roots.DefaultTrap,
        logic = StateRef{game.states.TrappedUsable_Explode,
            DC = params.DC,
            DestroyProjectileSpell = params.DestroyProjectileSpell,
            DestroyType = params.DestroyType,
            Key = params.Key,
            MinDistance = params.MinDistance,
            OneShot = params.OneShot,
            Skill = params.Skill,
            SoundOff = params.SoundOff,
            SoundOn = params.SoundOn,
            StartEnabled = params.StartEnabled,
            StartUseEnabled = params.StartUseEnabled,
            Type = params.Type,
            VFXOff = params.VFXOff,
            VFXOffBone = params.VFXOffBone,
            VFXOn = params.VFXOn,
            VFXOnBone = params.VFXOnBone,
            DestroyOnDisarm = params.DestroyOnDisarm,
        },
    },
    inputs={
        DisableObject=ExtSocket{description=[[Disable the Object (using it will not trigger the trap or Pressed output)]],{SocketRef{[[root.logic.inputs.DisableObject]]}}},
        EnableObject=ExtSocket{description=[[Enable the item  (using it will trigger the trap if active, and the Pressed output)]],{SocketRef{[[root.logic.inputs.EnableObject]]}}},
        Unlock=ExtSocket{description=[[Unlock the item]],{SocketRef{[[root.logic.inputs.Unlock]]}}},
        UseBlockedFromStory=ExtSocket{description=[[The item's use was blocked from story (because it was not enabled)]],{SocketRef{[[root.logic.inputs.UseBlockedFromStory]]}}},
        Lock=ExtSocket{description=[[Lock the item using params.Key as key]],{SocketRef{[[root.logic.inputs.Lock]]}}},
        Disarm=ExtSocket{description=[[Disarm the trap]],{SocketRef{[[root.logic.inputs.Disarm]]}}},
        Reveal=ExtSocket{description=[[Reveal the container, or its trapped state, depending on the Perception typeReveal the container + trapped state]],{SocketRef{[[root.logic.inputs.Reveal]]}}},
    },
    outputs={
        UseAttempt=ExtSocket{description=[[]],{SocketRef{[[root.logic.outputs.UseAttempt]]}}},
        UseFinishedSuccessfully=ExtSocket{description=[[]],{SocketRef{[[root.logic.outputs.UseFinishedSuccessfully]]}}},
        UseFailed=ExtSocket{description=[[]],{SocketRef{[[root.logic.outputs.UseFailed]]}}},
        Disarmed=ExtSocket{description=[[]],{SocketRef{[[root.logic.outputs.Disarmed]]}}},
        UsedWhileDisabled=ExtSocket{description=[[Item used while deactivated]],{SocketRef{[[root.logic.outputs.ActivateAttemptFailed]]}}},
        Activated=ExtSocket{description=[[]],{SocketRef{[[root.logic.outputs.Activate]]}}},
    }
}
