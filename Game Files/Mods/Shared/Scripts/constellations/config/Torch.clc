game.configs.Torch = Config{
    params = {
        GameplayLightSharpness = {
            type = EParamType.Number,
            help = [[Sharpness of gameplay light]],
            required = false,
            default = 0.1
        },
        LightOnSound = {
            type = EParamType.String,
            help = [[Sound played when this light is turned on.]],
            required = false,
            default = [[DEC_Interactive_Lightsources_Torch_Small_On]]
        },
        LightOffSound = {
            type = EParamType.String,
            help = [[Sound played when this light is turned off.]],
            required = false,
            default = [[DEC_Interactive_Lightsources_Torch_Small_Off]]
        },
        StartLit = {
            type = EParamType.Bool,
            help = [[Does the item start lit?]],
            required = false,
            default = true
        },
        GameplayLightRadius = {
            type = EParamType.Number,
            help = [[Radius of gameplay light]],
            required = false,
            default = 5.0
        },
        BurnEffect = {
            type = EParamType.String,
            help = [[VFX while item is burning.]],
            required = false,
            default = [[VFX_LightSources_GEN_Torch_A_01_0aee588d-ba2a-aa3b-a048-5fbc03779371]]
        },
        BurnEffectBone = {
            type = EParamType.String,
            help = [[Bone on which the VFX is played.]],
            required = false,
            default = [[Dummy_FX]]
        },
        GameplayLightOffsetFallback = {
            type = EParamType.Vector3,
            help = [[Places the gameplay light at this position if the provided bone is not valid for the entity.]],
            required = false,
            default = Vector3(0, 0, 0)
        },
        GameplayLight = {
            type = EParamType.Bool,
            help = [[Does the item cast a gameplay light, or is purely decorative?]],
            required = false,
            default = false
        },
        GameplayLightPointLightVerticalLimit = {
            type = EParamType.Number,
            help = [[Vertical limit of a point light that does not check line-of-sight]],
            required = false,
            default = 2.5
        }
    },
    root = StateRef{
        game.roots.DefaultTrap,
        logic = StateRef { 
            game.states.Torch,
            BurnEffect = params.BurnEffect,
            BurnEffectBone = params.BurnEffectBone,
            GameplayLight = params.GameplayLight,
            GameplayLightRadius = params.GameplayLightRadius,
            GameplayLightSharpness = params.GameplayLightSharpness,
            StartLit = params.StartLit,
            LightOnSound = params.LightOnSound,
            LightOffSound = params.LightOffSound,
            GameplayLightPointLightVerticalLimit = params.GameplayLightPointLightVerticalLimit,
        },
    },
    inputs={
        TurnOff=ExtSocket{description=[[Turns torch item off]],{SocketRef{[[root.logic.inputs.TurnOff]]}}},
        TurnOn=ExtSocket{description=[[Turns torch item on]],{SocketRef{[[root.logic.inputs.TurnOn]]}}},
        Toggle=ExtSocket{description=[[Toggle torch item]],{SocketRef{[[root.logic.inputs.Toggle]]}}},
        ChangeVFX=ExtSocket{description=[[Changes VFX used for the light. Expects a string parameter.]],{SocketRef{[[root.logic.inputs.ChangeVFX]]}}}
    },
    outputs={
        On=ExtSocket{description=[[Torch item turned on]],{SocketRef{[[root.logic.outputs.On]]}}},
        Off=ExtSocket{description=[[Torch item turned off]],{SocketRef{[[root.logic.outputs.Off]]}}},
    }
}
