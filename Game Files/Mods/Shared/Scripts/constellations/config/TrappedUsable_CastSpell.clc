game.configs.TrappedUsable_CastSpell = Config{
    params={
        ResponsibleCaster = {
            type = EParamType.String,
            help = [[The entity marked as responsible for casting the spell.
                     If empty, uses the object parameter of the Cast socket event.
                     Can be 'me' to set to the entity to which the config is attached.]],
            required = false,
            default = [[]]
        },
        TargetEntity = {
            type = EParamType.String,
            help = [[Target of the spell.
                    If empty, the spell will be cast on the person using the object.
                    Can be 'me' to set to the entity to which the config is attached.]],
            required = false,
            default = [[]]
        },
        MinDistance = {
            type = EParamType.Number,
            help = [[Minimum distance that players are required to be in for the skill check. A distance of 0 disables the check.]],
            required = false,
            default = 6
        },
        VFXOffBone = {
            type = EParamType.String,
            help = [[Bone on which the the VFX is played.]],
            required = false,
            default = [[Dummy_FX]]
        },
        Caster = {
            type = EParamType.String,
            help = [[The entity that will cast the spell.
                     Can be 'me' to set to the entity to which the config is attached.]],
            required = false,
            default = [[me]]
        },
        Spell = {
            type = EParamType.String,
            help = [[The the spell to cast]],
            required = false,
            default = [[Target_Poison_Trap]]
        },
        CastAtPosition = {
            type = EParamType.Bool,
            help = [[If true, cast at TargetEntity's position instead of target itself]],
            required = false,
            default = false
        },
        StartEnabled = {
            type = EParamType.Bool,
            help = [[Does the trap start enabled? (will it trigger when using the item?)]],
            required = false,
            default = true
        },
        VFXOnBone = {
            type = EParamType.String,
            help = [[Bone on which the the VFX is played.]],
            required = false,
            default = [[Dummy_FX]]
        },
        StartUseEnabled = {
            type = EParamType.Bool,
            help = [[Does the item's use start enabled? (should triggering item's use actions be blocked until the EnableObject socket is triggered?)]],
            required = false,
            default = true
        },
        VFXOn = {
            type = EParamType.String,
            help = [[VFX while the trap is enabled and has been spotted.]],
            required = false,
            default = [[VFX_Script_Trap_Overlay_Red_01_a7361f25-e942-e071-7ce3-7a8182f4e0ef]]
        },
        VFXOff = {
            type = EParamType.String,
            help = [[VFX while the trap is disabled.]],
            required = false,
            default = [[]]
        },
        SoundOn = {
            type = EParamType.String,
            help = [[Sound when trap is turned on]],
            required = false,
            default = [[PUZ_Trap_Mechanical_On]]
        },
        Key = {
            type = EParamType.String,
            help = [[Key used when locking the item]],
            required = false,
            default = [[STORYLOCK]]
        },
        OneShot = {
            type = EParamType.Bool,
            help = [[The trap activates only the first time on use (e.g. explodes chest), rather than every time (e.g. a chest with spikes that come out)]],
            required = false,
            default = true
        },
        SoundOff = {
            type = EParamType.String,
            help = [[Sound when trap is turned off]],
            required = false,
            default = [[PUZ_Trap_Mechanical_Off]]
        },
        DC = {
            type = EParamType.String,
            help = [[Perception check DC.]],
            required = false,
            default = [[HiddenPerception_Medium_cd1800ab-1b11-4c7a-9f50-fdeb8d35481f]]
        },
        TargetEntity2 = {
            type = EParamType.String,
            help = [[Second target of the spell.]],
            required = false,
            default = [[]]
        },
        CastVFX = {
            type = EParamType.String,
            help = [[VFX played on the caster when spell is cast.]],
            required = false,
            default = [[]]
        },
        Skill = {
            type = EParamType.String,
            help = [[The skill checked.]],
            required = false,
            default = [[Perception]]
        },
        Type = {
            type = EParamType.String,
            help = [[            Type of invisibility. Options:
            None - No perception logic.
            Invisible - Object is invisible until discovered
            Interactable - Object is uninteractable (like scenery) until discovered. Also hides 'trapped' state, if object is trapped.
            Trapped - Hides trapped state until discovered.
            Highlight - Object is highlighted when noticed.
            ]],
            required = false,
            default = [[Trapped]]
        },
        DestroyOnDisarm = {
            type = EParamType.Bool,
            help = [[Does the item break on Disarm?]],
            required = false,
            default = false
        },
    },
    root=StateRef{game.roots.DefaultTrap,
        logic = StateRef{game.states.TrappedUsable_CastSpell,
            CastAtPosition = params.CastAtPosition,
            Caster = params.Caster,
            CastVFX = params.CastVFX,
            DC = params.DC,
            Key = params.Key,
            MinDistance = params.MinDistance,
            OneShot = params.OneShot,
            ResponsibleCaster = params.ResponsibleCaster,
            Skill = params.Skill,
            SoundOff = params.SoundOff,
            SoundOn = params.SoundOn,
            Spell = params.Spell,
            StartEnabled = params.StartEnabled,
            StartUseEnabled = params.StartUseEnabled,
            TargetEntity = params.TargetEntity,
            TargetEntity2 = params.TargetEntity2,
            Type = params.Type,
            VFXOff = params.VFXOff,
            VFXOffBone = params.VFXOffBone,
            VFXOn = params.VFXOn,
            VFXOnBone = params.VFXOnBone,
            DestroyOnDisarm = params.DestroyOnDisarm,
        },
    },
    inputs={
        DisableObject=ExtSocket{description=[[Disable the Object (using it will not trigger the trap or Pressed output)]],{SocketRef{[[root.logic.inputs.DisableObject]]}}},
        EnableObject=ExtSocket{description=[[Enable the item  (using it will trigger the trap if active, and the Pressed output)]],{SocketRef{[[root.logic.inputs.EnableObject]]}}},
        Unlock=ExtSocket{description=[[Unlock the item]],{SocketRef{[[root.logic.inputs.Unlock]]}}},
        UseBlockedFromStory=ExtSocket{description=[[The item's use was blocked from story (because it was not enabled)]],{SocketRef{[[root.logic.inputs.UseBlockedFromStory]]}}},
        Lock=ExtSocket{description=[[Lock the item using params.Key as key]],{SocketRef{[[root.logic.inputs.Lock]]}}},
        Disarm=ExtSocket{description=[[Disarm the trap]],{SocketRef{[[root.logic.inputs.Disarm]]}}},
        Reveal=ExtSocket{description=[[Reveal the item, or its trapped state, depending on the Perception type]],{SocketRef{[[root.logic.inputs.Reveal]]}}},
    },
    outputs={
        UseFinishedSuccessfully=ExtSocket{description=[[]],{SocketRef{[[root.logic.outputs.UseFinishedSuccessfully]]}}},
        UseAttempt=ExtSocket{description=[[]],{SocketRef{[[root.logic.outputs.UseAttempt]]}}},
        UseFailed=ExtSocket{description=[[]],{SocketRef{[[root.logic.outputs.UseFailed]]}}},
        Disarmed=ExtSocket{description=[[]],{SocketRef{[[root.logic.outputs.Disarmed]]}}},
        UsedWhileDisabled=ExtSocket{description=[[Item used while deactivated]],{SocketRef{[[root.logic.outputs.ActivateAttemptFailed]]}}},
        Activated=ExtSocket{description=[[]],{SocketRef{[[root.logic.outputs.Activate]]}}},
    }
}
