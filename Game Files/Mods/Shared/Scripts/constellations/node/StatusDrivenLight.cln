game.states.StatusDrivenLight = State{
    function()
        params.LightEffect = {
            type = EParamType.String,
            required = false,
            default = "VFX_LightSources_GEN_Torch_A_01_0aee588d-ba2a-aa3b-a048-5fbc03779371",
            help = "VFX while item is lit."
        }

        params.LightEffectBone = {
            type = EParamType.String,
            required = false,
            default = "Dummy_FX",
            help = "Bone on which the VFX is played."
        }

        params.GameplayLight = {
            type = EParamType.Bool,
            required = false,
            default = false,
            help = "Does the item cast a gameplay light, or is purely decorative?"
        }

        params.GameplayLightRadius = {
            type = EParamType.Number,
            required = false,
            default = 5.0,
            help = "Radius of gameplay light"
        }

        params.GameplayLightSharpness = {
            type = EParamType.Number,
            required = false,
            default = 0.1,
            help = "Sharpness of gameplay light"
        }

        params.GameplayLightOffsetFallback = {
            type = EParamType.Vector3,
            help = "Places the gameplay light at this position if the provided bone is not valid for the entity.",
            required = false,
            default = Vector3(0, 0, 0)
        }

        params.StartLit = {
            type = EParamType.Bool,
            required = false,
            default = true,
            help = "Does the item start lit?"
        }

        params.LightOnSound = {
            type = EParamType.String,
            required = false,
            default = "",
            help = "Sound played when this light is turned on."
        }

        params.LightOffSound = {
            type = EParamType.String,
            required = false,
            default = "",
            help = "Sound played when this light is turned off."
        }

        params.Status = {
            type = EParamType.String,
            required = false,
            default = "BURNING",
            help = "When this status is active, the light is lit. Otherwise it's turned off."
        }

        params.GameplayLightPointLightVerticalLimit = {
            type = EParamType.Number,
            required = false,
            default = 2.5,
            help = "Vertical limit of a point light that does not check line-of-sight"
        }

        inputs.TurnOn = {}
        inputs.TurnOff = {}
        inputs.Toggle = {}
        inputs.ChangeVFX = {}

        inputs.StatusStartedInt = { internal = true }
        inputs.StatusStoppedInt = {internal = true}
        
        outputs.StartStatusInt = { internal = true }
        outputs.ToggleInt = {internal = true}
        outputs.StopStatusInt = { internal = true }
        
        outputs.TurnOnInt = {internal = true}
        outputs.TurnOffInt = {internal = true}

        outputs.ChangeVFXInt = {internal = true}

        outputs.On = {help = "Light turned on"}
        outputs.Off = {help = "Light turned off"}

        inputs.OnInt = {internal = true}
        inputs.OffInt = {internal = true}

        nodes.StatusProxy = Proxy{
            game.states.StatusHelper,
            params = {
                Status = params.Status
            },
            inputs = {
                TurnOn = {outputs.StartStatusInt},
                TurnOff = {outputs.StopStatusInt},
                Toggle = {outputs.ToggleInt}
            },
            outputs = {
                On = {inputs.StatusStartedInt},
                Off = {inputs.StatusStoppedInt}
            }
        }

        nodes.Light = Proxy{
            game.states.Light,
            params = {
                LightEffect = params.LightEffect,
                LightEffectBone = params.LightEffectBone,
                GameplayLight = params.GameplayLight,
                GameplayLightRadius = params.GameplayLightRadius,
                GamplayLightSharpness = params.GameplayLightSharpness,
                GameplayLightOffsetFallback = params.GameplayLightOffsetFallback,
                LightOnSound = params.LightOnSound,
                LightOffSound = params.LightOffSound,
                StartLit = params.StartLit,
                GameplayLightPointLightVerticalLimit = params.GameplayLightPointLightVerticalLimit
            }, 
            inputs = {
                TurnOn = {outputs.TurnOnInt},
                TurnOff = {outputs.TurnOffInt},
                ChangeVFX = {outputs.ChangeVFXInt}
            },
            outputs = {
                On = {inputs.OnInt},
                Off= {inputs.OffInt}
            }
        }

        local isOnFact = "Cnst.StatusDrivenLight.IsStatusLightOn"

        helpers.StartLit = function()
            local isOnFact = me.Blackboard.GetFact(isOnFact)
            if isOnFact ~= nil then
                return isOnFact == 1
            else
                return params.StartLit
            end
        end

        self.OnLoaded = function()
            if HasActiveStatus(me, params.Status) then
                TriggerOutput(outputs.TurnOnInt, nil, nil)
                return
            end

            if helpers.StartLit() then
                TriggerOutput(outputs.StartStatusInt, nil, nil)
            else
                TriggerOutput(outputs.StopStatusInt, nil, nil)
            end
        end

        socketEvents.TurnOn = function(ev)
            TriggerOutput(outputs.StartStatusInt, ev.Object, ev.Param)
        end

        socketEvents.TurnOff = function(ev)
            TriggerOutput(outputs.StopStatusInt, ev.Object, ev.Param)
        end

        socketEvents.Toggle = function(ev)
            TriggerOutput(outputs.ToggleInt, ev.Object, ev.Param)
        end

        socketEvents.StatusStartedInt = function(ev)
            TriggerOutput(outputs.TurnOnInt, ev.Object, ev.Param)
        end

        socketEvents.StatusStoppedInt = function(ev)
            TriggerOutput(outputs.TurnOffInt, ev.Object, ev.Param)
        end

        socketEvents.ChangeVFX = function(ev)
            TriggerOutput(outputs.ChangeVFXInt, ev.Object, ev.Param)
        end

        socketEvents.OnInt = function(ev)
            me.Blackboard.SetFact(isOnFact, 1)
            TriggerOutput(outputs.On, ev.Object, ev.Param)
        end

        socketEvents.OffInt = function(ev)
            me.Blackboard.SetFact(isOnFact, 0)
            TriggerOutput(outputs.Off, ev.Object, ev.Param)
        end
    end
}